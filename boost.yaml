---
- name: make build directory
  file:
    path: "{{ build_dir }}"
    state: directory

- name: download boost
  get_url:
    url: http://downloads.sourceforge.net/project/boost/boost/{{ boost_version }}/boost_{{ boost_version.replace('.', '_') }}.tar.gz
    dest: "{{ build_dir }}/boost_{{ boost_version }}.tar.gz"
    validate_certs: no
  register: result
  until: result|succeeded
  retries: 5

- name: untar boost
  command: "tar -zxvf {{ build_dir }}/boost_{{ boost_version }}.tar.gz"
  args:
    chdir: "{{ build_dir }}"
    creates: "{{ build_dir }}/boost_{{ boost_version.replace('.', '_') }}"

- name: bootstrap boost
  command: "./bootstrap.sh --prefix={{ puppetlabs_build_dir }}"
  args:
    chdir: "{{ build_dir }}/boost_{{ boost_version.replace('.', '_') }}"

- name: tell boost to use our locally-built gcc
  replace:
    dest: "{{ build_dir }}/boost_{{ boost_version.replace('.', '_') }}/project-config.jam"
    regexp: "using gcc ; "
    replace: "using gcc : : /opt/pl-build-tools/bin/g++ ; "
  when: ansible_architecture != 's390x'

- name: tell boost to use our locally-built cross-compiled gcc for s390x
  replace:
    dest: "{{ build_dir}}/boost_{{ boost_version.replace('.', '_') }}/project-config.jam"
    regexp: "using gcc ; "
    replace: "using gcc : : /opt/pl-build-tools/bin/s390x-ibm-linux-gnu-g++ ; "
  when: ansible_architecture == 's390x'

- name: install boost
  shell: "./b2 cxxflags=-fPIC cflags=-fPIC -a install"
  args:
    chdir: "{{ build_dir }}/boost_{{ boost_version.replace('.', '_') }}"
  when: ansible_architecture != 's390x'

- name: install boost for s390x
  shell: "./b2 cxxflags=-fPIC cflags=-fPIC -a install"
  args:
    chdir: "{{ build_dir }}/boost_{{ boost_version.replace('.', '_') }}"
  when: ansible_architecture == 's390x'
  ignore_errors: true # this was literally the solution recommended to me in #boost on freenode :(
